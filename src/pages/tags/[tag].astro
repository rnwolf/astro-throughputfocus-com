---
import BaseLayout from '$layouts/BaseLayout.astro';
import { Markdown } from 'astro/components'
import TagCard from '$components/TagCard.astro';
import PostPreviewCard from '$components/PostPreviewCard.astro';
import NavPaginationPageOne from '$components/NavPaginationPageOne.astro';
import Config from "$/website.config.cjs";

export async function getStaticPaths () {
  // grab all .md files from a folder
  let allPosts = await Astro.glob('../posts/*.md');
  // I need this filter to ignore files that they do not have 
  // a title, or no published date (in frontmatter)
  // this way I leave the date out while the post is not finished.
  let filteredPosts = 
      allPosts
      .filter(post => !post.frontmatter.draft)
      .filter((p) => { 
        return p.frontmatter.title && p.frontmatter.pubDate; 
      });
  // an object to collect existing tags
  let dix = {};
  filteredPosts.forEach((post) => {
    // go thru each tag in each published post,
    // fill in the object...
    post.frontmatter.tags.forEach((tag) => {
      if (!dix[tag]) dix[tag] = 0;
      dix[tag] += 1;
    });
  });
  // console.log('dix', dix); // <-- prints out our tag-cloud data.

  let ary = [];
  // format the data to return from getStaticPaths()
  for (let prop in dix) {
    ary.push({
      params: { tag: prop.replace(/:/g, '') },
      props: { tagname: prop, count: dix[prop] }
    });
  }
  return ary;
}

// grab the selected tag from the url (dynamic [tag])
const tagname = Astro.params.tag;
const tagcount = Astro.props.count;
// These section feels duplicated from getStaticPaths()
// opportunity to refactor...
let allPosts = await Astro.glob('../posts/*.md');
let filteredPosts = 
    allPosts.filter((p) => { 
      return p.frontmatter.title && p.frontmatter.pubDate; 
    });

// now filter to only posts containing the selected tag,
// these will be rendered below in the markup.
let tagged = filteredPosts.filter((p) => { 
  return p.frontmatter.tags.includes(tagname); 
});

---

<BaseLayout title={tagname + " posts"} 
description={"Index page for " + tagname + " related blog posts."} 
metaDescription="Use Tags index page to navigate to blogs posts related to a particular topic."
metaTitle={"Index page for " + tagname + " related blog posts."} 
metaImage="default-opengraph-image.png"
metaImageAlt="System throughput is determined by system constraint.">

	<div class="pt-24 mx-auto px-4 sm:px-6 lg:px-8">
  		<div class="prose max-w-6xl mx-auto">
			<Markdown>

			# Tags

			Some blub about Tags for the site.

			</Markdown>

			<TagCard tag={tagname} />
      <p>{tagged.length}</p>
			<div class="h-full px-6 py-12 lg:flex lg:justify-center lg:items-center">
				<div class="grid lg:grid-cols-2 gap-12 lg:gap-6">
					{tagged.map((post) => <PostPreviewCard post={post} />)}
				</div>
			</div>
		<!-- <NavPaginationPageOne page={page} /> -->
		</div>
	</div>
</BaseLayout>